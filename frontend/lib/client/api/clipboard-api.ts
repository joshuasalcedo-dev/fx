/* tslint:disable */
/* eslint-disable */
/**
 * Clipboard API
 * REST API for managing clipboard entries
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { ClipboardDto } from '../models';
// @ts-ignore
import { ClipboardStats } from '../models';
// @ts-ignore
import { Page } from '../models';
// @ts-ignore
import { StopClipboardResponse } from '../models';
// @ts-ignore
import { TogglePinRequest } from '../models';
/**
 * ClipboardApi - axios parameter creator
 * @export
 */
export const ClipboardApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a paginated list of clipboard entries sorted by timestamp in descending order
         * @summary Get all clipboard entries
         * @param {number} [page] Page number (zero-based)
         * @param {number} [max] Number of items per page (max 100)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clipboards: async (page?: number, max?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/local/clipboards`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (max !== undefined) {
                localVarQueryParameter['max'] = max;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes all clipboard entries, optionally including pinned entries
         * @summary Delete all clipboard entries
         * @param {boolean} [includePinned] Whether to include pinned entries in deletion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllClipboards: async (includePinned?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/local/clipboards/delete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includePinned !== undefined) {
                localVarQueryParameter['includePinned'] = includePinned;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a specific clipboard entry by ID
         * @summary Delete a clipboard entry
         * @param {number} id ID of the clipboard entry to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClipboard: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteClipboard', 'id', id)
            const localVarPath = `/api/local/clipboards/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClipboardStats: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/local/clipboards/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [hours] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecentClipboards: async (hours?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/local/clipboards/recent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (hours !== undefined) {
                localVarQueryParameter['hours'] = hours;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Toggles the pin status of a clipboard entry
         * @summary Toggle pin status
         * @param {TogglePinRequest} togglePinRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pinClipboards: async (togglePinRequest: TogglePinRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'togglePinRequest' is not null or undefined
            assertParamExists('pinClipboards', 'togglePinRequest', togglePinRequest)
            const localVarPath = `/api/local/clipboards/pin`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(togglePinRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all pinned clipboard entries
         * @summary Get pinned clipboard entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pinnedClipboards: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/local/clipboards/pins`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Searches clipboard entries by content
         * @summary Search clipboard entries
         * @param {string} query Search query
         * @param {number} [page] Page number (zero-based)
         * @param {number} [size] Number of items per page (max 100)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchClipboards: async (query: string, page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('searchClipboards', 'query', query)
            const localVarPath = `/api/local/clipboards/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopClipboard: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/local/clipboards/stop`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClipboardApi - functional programming interface
 * @export
 */
export const ClipboardApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClipboardApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a paginated list of clipboard entries sorted by timestamp in descending order
         * @summary Get all clipboard entries
         * @param {number} [page] Page number (zero-based)
         * @param {number} [max] Number of items per page (max 100)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clipboards(page?: number, max?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Page>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clipboards(page, max, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ClipboardApi.clipboards']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Deletes all clipboard entries, optionally including pinned entries
         * @summary Delete all clipboard entries
         * @param {boolean} [includePinned] Whether to include pinned entries in deletion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAllClipboards(includePinned?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAllClipboards(includePinned, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ClipboardApi.deleteAllClipboards']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Deletes a specific clipboard entry by ID
         * @summary Delete a clipboard entry
         * @param {number} id ID of the clipboard entry to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteClipboard(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteClipboard(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ClipboardApi.deleteClipboard']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClipboardStats(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClipboardStats>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClipboardStats(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ClipboardApi.getClipboardStats']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {number} [hours] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecentClipboards(hours?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ClipboardDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecentClipboards(hours, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ClipboardApi.getRecentClipboards']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Toggles the pin status of a clipboard entry
         * @summary Toggle pin status
         * @param {TogglePinRequest} togglePinRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pinClipboards(togglePinRequest: TogglePinRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClipboardDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pinClipboards(togglePinRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ClipboardApi.pinClipboards']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Returns a list of all pinned clipboard entries
         * @summary Get pinned clipboard entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pinnedClipboards(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pinnedClipboards(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ClipboardApi.pinnedClipboards']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Searches clipboard entries by content
         * @summary Search clipboard entries
         * @param {string} query Search query
         * @param {number} [page] Page number (zero-based)
         * @param {number} [size] Number of items per page (max 100)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchClipboards(query: string, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Page>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchClipboards(query, page, size, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ClipboardApi.searchClipboards']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stopClipboard(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StopClipboardResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stopClipboard(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ClipboardApi.stopClipboard']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ClipboardApi - factory interface
 * @export
 */
export const ClipboardApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClipboardApiFp(configuration)
    return {
        /**
         * Returns a paginated list of clipboard entries sorted by timestamp in descending order
         * @summary Get all clipboard entries
         * @param {number} [page] Page number (zero-based)
         * @param {number} [max] Number of items per page (max 100)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clipboards(page?: number, max?: number, options?: any): AxiosPromise<Page> {
            return localVarFp.clipboards(page, max, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes all clipboard entries, optionally including pinned entries
         * @summary Delete all clipboard entries
         * @param {boolean} [includePinned] Whether to include pinned entries in deletion
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAllClipboards(includePinned?: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAllClipboards(includePinned, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a specific clipboard entry by ID
         * @summary Delete a clipboard entry
         * @param {number} id ID of the clipboard entry to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClipboard(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.deleteClipboard(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClipboardStats(options?: any): AxiosPromise<ClipboardStats> {
            return localVarFp.getClipboardStats(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [hours] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecentClipboards(hours?: number, options?: any): AxiosPromise<Array<ClipboardDto>> {
            return localVarFp.getRecentClipboards(hours, options).then((request) => request(axios, basePath));
        },
        /**
         * Toggles the pin status of a clipboard entry
         * @summary Toggle pin status
         * @param {TogglePinRequest} togglePinRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pinClipboards(togglePinRequest: TogglePinRequest, options?: any): AxiosPromise<ClipboardDto> {
            return localVarFp.pinClipboards(togglePinRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all pinned clipboard entries
         * @summary Get pinned clipboard entries
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pinnedClipboards(options?: any): AxiosPromise<string> {
            return localVarFp.pinnedClipboards(options).then((request) => request(axios, basePath));
        },
        /**
         * Searches clipboard entries by content
         * @summary Search clipboard entries
         * @param {string} query Search query
         * @param {number} [page] Page number (zero-based)
         * @param {number} [size] Number of items per page (max 100)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchClipboards(query: string, page?: number, size?: number, options?: any): AxiosPromise<Page> {
            return localVarFp.searchClipboards(query, page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stopClipboard(options?: any): AxiosPromise<StopClipboardResponse> {
            return localVarFp.stopClipboard(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClipboardApi - interface
 * @export
 * @interface ClipboardApi
 */
export interface ClipboardApiInterface {
    /**
     * Returns a paginated list of clipboard entries sorted by timestamp in descending order
     * @summary Get all clipboard entries
     * @param {number} [page] Page number (zero-based)
     * @param {number} [max] Number of items per page (max 100)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipboardApiInterface
     */
    clipboards(page?: number, max?: number, options?: RawAxiosRequestConfig): AxiosPromise<Page>;

    /**
     * Deletes all clipboard entries, optionally including pinned entries
     * @summary Delete all clipboard entries
     * @param {boolean} [includePinned] Whether to include pinned entries in deletion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipboardApiInterface
     */
    deleteAllClipboards(includePinned?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Deletes a specific clipboard entry by ID
     * @summary Delete a clipboard entry
     * @param {number} id ID of the clipboard entry to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipboardApiInterface
     */
    deleteClipboard(id: number, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipboardApiInterface
     */
    getClipboardStats(options?: RawAxiosRequestConfig): AxiosPromise<ClipboardStats>;

    /**
     * 
     * @param {number} [hours] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipboardApiInterface
     */
    getRecentClipboards(hours?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<ClipboardDto>>;

    /**
     * Toggles the pin status of a clipboard entry
     * @summary Toggle pin status
     * @param {TogglePinRequest} togglePinRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipboardApiInterface
     */
    pinClipboards(togglePinRequest: TogglePinRequest, options?: RawAxiosRequestConfig): AxiosPromise<ClipboardDto>;

    /**
     * Returns a list of all pinned clipboard entries
     * @summary Get pinned clipboard entries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipboardApiInterface
     */
    pinnedClipboards(options?: RawAxiosRequestConfig): AxiosPromise<string>;

    /**
     * Searches clipboard entries by content
     * @summary Search clipboard entries
     * @param {string} query Search query
     * @param {number} [page] Page number (zero-based)
     * @param {number} [size] Number of items per page (max 100)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipboardApiInterface
     */
    searchClipboards(query: string, page?: number, size?: number, options?: RawAxiosRequestConfig): AxiosPromise<Page>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipboardApiInterface
     */
    stopClipboard(options?: RawAxiosRequestConfig): AxiosPromise<StopClipboardResponse>;

}

/**
 * ClipboardApi - object-oriented interface
 * @export
 * @class ClipboardApi
 * @extends {BaseAPI}
 */
export class ClipboardApi extends BaseAPI implements ClipboardApiInterface {
    /**
     * Returns a paginated list of clipboard entries sorted by timestamp in descending order
     * @summary Get all clipboard entries
     * @param {number} [page] Page number (zero-based)
     * @param {number} [max] Number of items per page (max 100)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipboardApi
     */
    public clipboards(page?: number, max?: number, options?: RawAxiosRequestConfig) {
        return ClipboardApiFp(this.configuration).clipboards(page, max, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes all clipboard entries, optionally including pinned entries
     * @summary Delete all clipboard entries
     * @param {boolean} [includePinned] Whether to include pinned entries in deletion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipboardApi
     */
    public deleteAllClipboards(includePinned?: boolean, options?: RawAxiosRequestConfig) {
        return ClipboardApiFp(this.configuration).deleteAllClipboards(includePinned, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a specific clipboard entry by ID
     * @summary Delete a clipboard entry
     * @param {number} id ID of the clipboard entry to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipboardApi
     */
    public deleteClipboard(id: number, options?: RawAxiosRequestConfig) {
        return ClipboardApiFp(this.configuration).deleteClipboard(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipboardApi
     */
    public getClipboardStats(options?: RawAxiosRequestConfig) {
        return ClipboardApiFp(this.configuration).getClipboardStats(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [hours] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipboardApi
     */
    public getRecentClipboards(hours?: number, options?: RawAxiosRequestConfig) {
        return ClipboardApiFp(this.configuration).getRecentClipboards(hours, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Toggles the pin status of a clipboard entry
     * @summary Toggle pin status
     * @param {TogglePinRequest} togglePinRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipboardApi
     */
    public pinClipboards(togglePinRequest: TogglePinRequest, options?: RawAxiosRequestConfig) {
        return ClipboardApiFp(this.configuration).pinClipboards(togglePinRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all pinned clipboard entries
     * @summary Get pinned clipboard entries
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipboardApi
     */
    public pinnedClipboards(options?: RawAxiosRequestConfig) {
        return ClipboardApiFp(this.configuration).pinnedClipboards(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Searches clipboard entries by content
     * @summary Search clipboard entries
     * @param {string} query Search query
     * @param {number} [page] Page number (zero-based)
     * @param {number} [size] Number of items per page (max 100)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipboardApi
     */
    public searchClipboards(query: string, page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return ClipboardApiFp(this.configuration).searchClipboards(query, page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipboardApi
     */
    public stopClipboard(options?: RawAxiosRequestConfig) {
        return ClipboardApiFp(this.configuration).stopClipboard(options).then((request) => request(this.axios, this.basePath));
    }
}

