/* tslint:disable */
/* eslint-disable */
/**
 * Clipboard API
 * REST API for managing clipboard entries
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
/**
 * ClipboardExportApi - axios parameter creator
 * @export
 */
export const ClipboardExportApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Exports clipboard entries in CSV format
         * @summary Export clipboard entries as CSV
         * @param {boolean} [includePinned] Whether to include pinned entries in export
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportAsCsv: async (includePinned?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/local/clipboards/export/csv`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includePinned !== undefined) {
                localVarQueryParameter['includePinned'] = includePinned;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Exports clipboard entries in JSON format
         * @summary Export clipboard entries as JSON
         * @param {boolean} [includePinned] Whether to include pinned entries in export
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportAsJson: async (includePinned?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/local/clipboards/export/json`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includePinned !== undefined) {
                localVarQueryParameter['includePinned'] = includePinned;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Exports clipboard entries in plain text format
         * @summary Export clipboard entries as text
         * @param {boolean} [includePinned] Whether to include pinned entries in export
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportAsText: async (includePinned?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/local/clipboards/export/txt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (includePinned !== undefined) {
                localVarQueryParameter['includePinned'] = includePinned;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClipboardExportApi - functional programming interface
 * @export
 */
export const ClipboardExportApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ClipboardExportApiAxiosParamCreator(configuration)
    return {
        /**
         * Exports clipboard entries in CSV format
         * @summary Export clipboard entries as CSV
         * @param {boolean} [includePinned] Whether to include pinned entries in export
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportAsCsv(includePinned?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportAsCsv(includePinned, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClipboardExportApi.exportAsCsv']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Exports clipboard entries in JSON format
         * @summary Export clipboard entries as JSON
         * @param {boolean} [includePinned] Whether to include pinned entries in export
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportAsJson(includePinned?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportAsJson(includePinned, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClipboardExportApi.exportAsJson']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Exports clipboard entries in plain text format
         * @summary Export clipboard entries as text
         * @param {boolean} [includePinned] Whether to include pinned entries in export
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportAsText(includePinned?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportAsText(includePinned, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ClipboardExportApi.exportAsText']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ClipboardExportApi - factory interface
 * @export
 */
export const ClipboardExportApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ClipboardExportApiFp(configuration)
    return {
        /**
         * Exports clipboard entries in CSV format
         * @summary Export clipboard entries as CSV
         * @param {boolean} [includePinned] Whether to include pinned entries in export
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportAsCsv(includePinned?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.exportAsCsv(includePinned, options).then((request) => request(axios, basePath));
        },
        /**
         * Exports clipboard entries in JSON format
         * @summary Export clipboard entries as JSON
         * @param {boolean} [includePinned] Whether to include pinned entries in export
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportAsJson(includePinned?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.exportAsJson(includePinned, options).then((request) => request(axios, basePath));
        },
        /**
         * Exports clipboard entries in plain text format
         * @summary Export clipboard entries as text
         * @param {boolean} [includePinned] Whether to include pinned entries in export
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportAsText(includePinned?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.exportAsText(includePinned, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ClipboardExportApi - interface
 * @export
 * @interface ClipboardExportApi
 */
export interface ClipboardExportApiInterface {
    /**
     * Exports clipboard entries in CSV format
     * @summary Export clipboard entries as CSV
     * @param {boolean} [includePinned] Whether to include pinned entries in export
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipboardExportApiInterface
     */
    exportAsCsv(includePinned?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Exports clipboard entries in JSON format
     * @summary Export clipboard entries as JSON
     * @param {boolean} [includePinned] Whether to include pinned entries in export
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipboardExportApiInterface
     */
    exportAsJson(includePinned?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * Exports clipboard entries in plain text format
     * @summary Export clipboard entries as text
     * @param {boolean} [includePinned] Whether to include pinned entries in export
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipboardExportApiInterface
     */
    exportAsText(includePinned?: boolean, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * ClipboardExportApi - object-oriented interface
 * @export
 * @class ClipboardExportApi
 * @extends {BaseAPI}
 */
export class ClipboardExportApi extends BaseAPI implements ClipboardExportApiInterface {
    /**
     * Exports clipboard entries in CSV format
     * @summary Export clipboard entries as CSV
     * @param {boolean} [includePinned] Whether to include pinned entries in export
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipboardExportApi
     */
    public exportAsCsv(includePinned?: boolean, options?: RawAxiosRequestConfig) {
        return ClipboardExportApiFp(this.configuration).exportAsCsv(includePinned, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Exports clipboard entries in JSON format
     * @summary Export clipboard entries as JSON
     * @param {boolean} [includePinned] Whether to include pinned entries in export
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipboardExportApi
     */
    public exportAsJson(includePinned?: boolean, options?: RawAxiosRequestConfig) {
        return ClipboardExportApiFp(this.configuration).exportAsJson(includePinned, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Exports clipboard entries in plain text format
     * @summary Export clipboard entries as text
     * @param {boolean} [includePinned] Whether to include pinned entries in export
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClipboardExportApi
     */
    public exportAsText(includePinned?: boolean, options?: RawAxiosRequestConfig) {
        return ClipboardExportApiFp(this.configuration).exportAsText(includePinned, options).then((request) => request(this.axios, this.basePath));
    }
}

